pm.signal <- apply(pm.si, 2, function (x) {myGeno(refgene.pm, x, "signal")})
ex.signal <- apply(ex.si, 2, function (x) {myGeno(refgene.tx, x, "signal")})
it.signal <- apply(it.si, 2, function (x) {myGeno(refgene.tx, x, "signal")})
en.signal <- apply(en.si, 2, function (x) {myGeno(refgene.en, x, "signal")})
u5.signal <- apply(u5.si, 2, function (x) {myGeno(refgene.tx, x, "signal")})
u3.signal <- apply(u3.si, 2, function (x) {myGeno(refgene.tx, x, "signal")})
colnames(pm.signal) <- paste(colnames(pm.signal), "pm.signal", sep = ".")
colnames(ex.signal) <- paste(colnames(ex.signal), "ex.signal", sep = ".")
colnames(it.signal) <- paste(colnames(it.signal), "it.signal", sep = ".")
colnames(en.signal) <- paste(colnames(en.signal), "en.signal", sep = ".")
colnames(u5.signal) <- paste(colnames(u5.signal), "u5.signal", sep = ".")
colnames(u3.signal) <- paste(colnames(u3.signal), "u3.signal", sep = ".")
idx0 <- rna$symbol[rna$symbol %in% rownames(refgene.tx)]
idx1 <- match(idx0, rna$symbol)
idx2 <- match(idx0, rownames(refgene.tx))
mod.dt <- data.frame(row.names = idx0, rna = log2(rna$TPM + 1)[idx1],  # log2
pm.length[idx2, ], ex.length[idx2, ], it.length[idx2, ], en.length[idx2, ], u5.length[idx2, ], u3.length[idx2, ],
pm.peak[idx2, ], ex.peak[idx2, ], it.peak[idx2, ], en.peak[idx2, ], u5.peak[idx2, ], u3.peak[idx2, ],
ex.intensity[idx2, ], it.intensity[idx2, ], u5.intensity[idx2, ], u3.intensity[idx2, ],
pm.signal[idx2, ], ex.signal[idx2, ], it.signal[idx2, ], en.signal[idx2, ], u5.signal[idx2, ], u3.signal[idx2, ])
head(mod.dt)
str(data1)
data1 <- mod.dt
str(data1)
dim(data1)
save(data1, "~/Dropbox/Network/R1/esb4.data1.rdt")  # ESB4
save(data1, file = "~/Dropbox/Network/R1/esb4.data1.rdt")  # ESB4
tail(data1)
rm(mod.dt)
data2 <-data1[data1$rna > 5, ]  # choose on rna
data2 <-data1[data1$rna > 3, ]  # choose on rna
data2 <-data1[data1$rna > 5, ]  # choose on rna
x = data2[, grep("length", colnames(data2))]
head(x)
sum(TRUE, TRUE, FALSE)
data3 <- data2[apply(data2[, grep("length", colnames(data2))], 1, function (x) {sum(as.logical(x)) > 10}), ]
data3 <- data2[apply(data2[, grep("length", colnames(data2))], 1, function (x) {sum(as.logical(x)) > 20}), ]
summary(data3$rna)
rna1 <- data3$rna  # log2 transformed
rna2 <- scale(data3$rna)  # z-transfrormed
geno <- log2(as.matrix(data3[, -1]) + 1)  # log2 transformed
cat(date(), "correlation on single epigenotype \n")
mod.single <- matrix(nrow = ncol(geno), ncol = 4,
dimnames = list(colnames(geno), c("estimate", "p.value", "beta", "logLik")))
for (i in 1:ncol(geno)) {  # per genotype
if (i %% 10 == 0) cat(i, "in", ncol(geno), "\n")
model1 <- lm(rna2 ~ 1)
model2 <- lm(rna2 ~ geno[, i])
cor1 = cor.test(rna2, geno[, i], method = "pearson")
# cor1 = cor.test(rna2, geno[, i], method = "kendall")
mod.single[i, "estimate"] = cor1$estimate
mod.single[i, "p.value"] = cor1$p.value
mod.single[i, "beta"]  = model2$coefficients[2]
mod.single[i, "logLik"] = logLik(model2) - logLik(model1)
}
i
colnames(geno)[155]
summary(geno[, 155])
summary(u5.len)
summary(u5.length)
summary(u3.length)
model1
model2
summary(model2)
cor1 = cor.test(rna2, geno[, i], method = "pearson")
cor1
mod.single[i, "p.value"] = cor1$p.value
mod.single[i, "logLik"] = logLik(model2) - logLik(model1)
mod.single[i, "beta"]  = model2$coefficients[2]
mod.single[i, "estimate"] = cor1$estimate
i
model1 <- lm(rna2 ~ 1)
model2 <- lm(rna2 ~ geno[, i])
summary(geno[, 155])
geno[, 155]
summary(u5.len)
table(u5.len == 0)
summary(it.len)
summary(u3.len)
summary(ex.len)
table(ex.len == 0)
summary(u5.len)
rm(list = ls())
source('~/Dropbox/Network/R1/analysis1.R')
str(data1)
head(data1)
dim(data1)
data2 <- data1[data1$rna > 3, ]  # choose on rna
data3 <- data2[apply(data2[, grep("length", colnames(data2))], 1, function (x) {sum(as.logical(x)) > 20}), ]
rna1 <- data3$rna  # log2 transformed
rna2 <- scale(data3$rna)  # z-transfrormed
geno <- log2(as.matrix(data3[, -1]) + 1)  # log2 transformed
mod.single <- matrix(nrow = ncol(geno), ncol = 4,
dimnames = list(colnames(geno), c("estimate", "p.value", "beta", "logLik")))
for (i in 1:ncol(geno)) {  # per genotype
if (i %% 10 == 0) cat(i, "in", ncol(geno), "\n")
model1 <- lm(rna2 ~ 1)
model2 <- lm(rna2 ~ geno[, i])
cor1 = cor.test(rna2, geno[, i], method = "pearson")
# cor1 = cor.test(rna2, geno[, i], method = "kendall")
mod.single[i, "estimate"] = cor1$estimate
mod.single[i, "p.value"] = cor1$p.value
mod.single[i, "beta"]  = model2$coefficients[2]
mod.single[i, "logLik"] = logLik(model2) - logLik(model1)
}
geno.sd <- apply(geno, 2, sd)
geno.sd
summary(geno.sd)
geno.sd[geno.sd == 0]
grep("enhancer.u5", colnames(geno))
colnames(geno)[grep("enhancer.u5", colnames(geno))]
geno <- geno[, -[grep("enhancer.u5", colnames(geno))]
geno <- geno[, -grep("enhancer.u5", colnames(geno))]
dim(geno)
hist(geno.sd)
hist(geno.sd, n = 20)
hist(geno.sd, n = 30)
hist(geno.sd, n = 100)
geno.sd[geno.sd < .5]
geno.sd[geno.sd < .2]
geno.sd[geno.sd < .3]
rank(geno.sd)
sort(geno.sd)
geno <- geno[, -grep("enhancer.u5", colnames(geno))]
geno <- geno[, -grep("enhancer.u3", colnames(geno))]
geno <- geno[, -grep("enhancer.ex", colnames(geno))]
dim(geno)
geno <- log2(as.matrix(data3[, -1]) + 1)  # log2 transformed
colnames(geno)
geno <- geno[, !grep("enhancer.u5", colnames(geno))]
geno <- log2(as.matrix(data3[, -1]) + 1)  # log2 transformed
grep("enhancer.u5", colnames(geno))
geno <- geno[, -c(grep("enhancer.u5", colnames(geno)))]
dim(geno)
geno <- geno[, -c(grep("enhancer.u3", colnames(geno)))]
geno <- geno[, -c(grep("enhancer.ex", colnames(geno)))]
dim(geno)
cat(date(), "correlation on single epigenotype \n")
mod.single <- matrix(nrow = ncol(geno), ncol = 4,
dimnames = list(colnames(geno), c("estimate", "p.value", "beta", "logLik")))
for (i in 1:ncol(geno)) {  # per genotype
if (i %% 10 == 0) cat(i, "in", ncol(geno), "\n")
model1 <- lm(rna2 ~ 1)
model2 <- lm(rna2 ~ geno[, i])
cor1 = cor.test(rna2, geno[, i], method = "pearson")
# cor1 = cor.test(rna2, geno[, i], method = "kendall")
mod.single[i, "estimate"] = cor1$estimate
mod.single[i, "p.value"] = cor1$p.value
mod.single[i, "beta"]  = model2$coefficients[2]
mod.single[i, "logLik"] = logLik(model2) - logLik(model1)
}
sort(abs(mod.single[, "estimate"]), decreasing = T)
sort(abs(mod.single[, "p.value"]))
cat(date(), "linear regression for epigenotype pair \n")
pairs <- combn(colnames(geno), 2)
mod.pair <- matrix(0, nrow = ncol(pairs), ncol = 6,
dimnames = list(paste("pair", 1:ncol(pairs), sep = ""),
c("intercept", "mark1", "mark2", "interaction", "r2", "logLik")))
for (i in 1: ncol(pairs)) {
if (i %% 1e2 == 0) cat(i, "in", ncol(pairs), "\n")
# data1 <- data.frame(rna = rna1, geno[, pairs[, i]])
data1 <- data.frame(rna = rna2, geno[, pairs[, i]])
model1 <- lm(as.formula(paste("rna ~ ", paste(colnames(data1)[-1], collapse= "+"))), data1)  # additive
model2 <- lm(as.formula(paste("rna ~ ", paste(colnames(data1)[-1], collapse= "*"))), data1)  # complete
if (nrow(summary(model2)$coefficients) == 4)
mod.pair[i, ] <- c(summary(model2)$coefficients[, "Estimate"],
summary(model2)$r.squared, logLik(model2) - logLik(model1))
# anova(model)
}
summary(mod.pair[, "intercept"])
summary(mod.pair[, "mark1"])
summary(mod.pair[, "mark2"])
summary(mod.pair[, "interaction"])
summary(mod.pair[, "r2"])
summary(mod.pair[, "logLik"])
aic.step1 <- lm(rna2 ~ 1, data3)
aic.step2 <- stepAIC(aic.step1, as.formula(paste("~. +", paste(colnames(mod.dt2)[-1], collapse = "+"))),
direction="forward")  # additive
aic.step2 <- stepAIC(aic.step1, as.formula(paste("~. +", paste(colnames(geno), collapse = "+"))),
direction="forward")  # additive
mod.aic <- aic.step2
summary(mod.aic)
aic.step2 <- stepAIC(aic.step1, as.formula(paste(paste("~. + (", paste(colnames(geno), collapse = "+")), ")^2")),
direction="forward")  # additive & first order interaction
save(mod.single, mod.pair, mod.aic, pairs, file = "~/Dropbox/Network/R1/esb4.analysis.rdt")
cat(date() --- I: total length in given feature)
cat(date(), "--- I: total length in given feature")
colnames(marks.bi)
effect.dt1 <- as.data.frame(mod.single)
effect.dt1$mark <- factor(gsub("\\..*", "", rownames(effect.dt1)), levels = colnames(marks.bi))
effect.dt1$type <- gsub("^.*\\.", "", rownames(effect.dt1))
effect.dt1$feature <- gsub("^.*\\.(.*?)", "", rownames(effect.dt1))
effect.dt1$feature <- gsub("\\..*", "", effect.dt1$feature)
effect.dt1$feature <- gsub("ex", "Exon", effect.dt1$feature)
effect.dt1$feature <- gsub("it", "Intron", effect.dt1$feature)
effect.dt1$feature <- gsub("pm", "Promoter", effect.dt1$feature)
effect.dt1$feature <- gsub("en", "Enhancer", effect.dt1$feature)
effect.dt1$feature <- gsub("u5", "5UTR", effect.dt1$feature)
effect.dt1$feature <- gsub("u3", "3UTR", effect.dt1$feature)
effect.dt1$significance <- -log10(effect.dt1$p.value)
ggplot(effect.dt1, aes(x = mark, y = estimate, color = feature)) +
# ggplot(effect.dt1, aes(x = mark, y = beta, color = feature)) +
# geom_point(aes(size = logLik)) +
geom_point(aes(size = significance)) +
facet_grid(type ~ .) +
# scale_y_continuous(lim = c(-.35, .35)) +
theme_bw() + xlab("") + ylab("Effect") +
theme(panel.border = element_rect(size = 1, color = "black")) +
theme(axis.text.x = element_text(size = 12, angle = -90, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
strip.text = element_text(size = 12, face = "bold")) +
theme(legend.position = "top", legend.direction = "horizontal",
legend.text = element_text(size = 12, face = "bold"),
#       legend.title = element_blank(), legend.key = element_blank())
legend.title = element_text(size = 12, face = "bold"), legend.key = element_blank())
effect.dt2 <- as.data.frame(mod.pair)
effect.dt3 <- effect.dt2[effect.dt2$logLik > quantile(effect.dt2$logLik, .99), ]
label <- rep(0, nrow(effect.dt3))
for (i in 1:nrow(effect.dt3))
label[i] <-  paste(pairs[, as.numeric(gsub("pair", "", rownames(effect.dt3)[i]))], collapse = "||")
effect.dt3$label <- label
effect.dt3$TF <- rep("NO", nrow(effect.dt3))
effect.dt3$TF[grep("ctcf", effect.dt3$label)] <- "YES"
effect.dt3$TF[grep("pol2", effect.dt3$label)] <- "YES"
effect.dt3$TF <- factor(effect.dt3$TF, levels = c("YES", "NO"))
ggplot(effect.dt3, aes(x = label, y = interaction)) +
geom_point(aes(color = TF, size = logLik)) +
# scale_y_continuous(lim = c(-.2, .2)) +
theme_bw() + xlab("") + ylab("Effect") +
theme(panel.border = element_rect(size = 1, color = "black")) +
theme(axis.text.x = element_text(size = 10, angle = -90, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
strip.text = element_text(size = 12, face = "bold")) +
theme(legend.position = "top", legend.direction = "horizontal",
legend.text = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"), legend.key = element_blank())
ggplot(effect.dt1, aes(x = mark, y = estimate, color = feature)) +
# ggplot(effect.dt1, aes(x = mark, y = beta, color = feature)) +
# geom_point(aes(size = logLik)) +
geom_point(aes(size = significance)) +
facet_grid(type ~ .) +
# scale_y_continuous(lim = c(-.35, .35)) +
theme_bw() + xlab("") + ylab("Effect") +
theme(panel.border = element_rect(size = 1, color = "black")) +
theme(axis.text.x = element_text(size = 12, angle = -90, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
strip.text = element_text(size = 12, face = "bold")) +
theme(legend.position = "top", legend.direction = "horizontal",
legend.text = element_text(size = 12, face = "bold"),
#       legend.title = element_blank(), legend.key = element_blank())
legend.title = element_text(size = 12, face = "bold"), legend.key = element_blank())
ggplot(effect.dt1, aes(x = mark, y = beta, color = feature)) +
geom_point(aes(size = logLik)) +
# geom_point(aes(size = significance)) +
facet_grid(type ~ .) +
# scale_y_continuous(lim = c(-.35, .35)) +
theme_bw() + xlab("") + ylab("Effect") +
theme(panel.border = element_rect(size = 1, color = "black")) +
theme(axis.text.x = element_text(size = 12, angle = -90, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
strip.text = element_text(size = 12, face = "bold")) +
theme(legend.position = "top", legend.direction = "horizontal",
legend.text = element_text(size = 12, face = "bold"),
#       legend.title = element_blank(), legend.key = element_blank())
legend.title = element_text(size = 12, face = "bold"), legend.key = element_blank())
ggplot(effect.dt1, aes(x = mark, y = beta, color = feature)) +
geom_point(aes(size = logLik)) +
# geom_point(aes(size = significance)) +
geom_hline(yintercept = 0) +
facet_grid(type ~ .) +
# scale_y_continuous(lim = c(-.35, .35)) +
theme_bw() + xlab("") + ylab("Effect") +
theme(panel.border = element_rect(size = 1, color = "black")) +
theme(axis.text.x = element_text(size = 12, angle = -90, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
strip.text = element_text(size = 12, face = "bold")) +
theme(legend.position = "top", legend.direction = "horizontal",
legend.text = element_text(size = 12, face = "bold"),
#       legend.title = element_blank(), legend.key = element_blank())
legend.title = element_text(size = 12, face = "bold"), legend.key = element_blank())
dev.off()
ggplot(effect.dt1, aes(x = mark, y = beta, color = feature)) +
geom_point(aes(size = logLik)) +
# geom_point(aes(size = significance)) +
facet_grid(type ~ .) +
geom_hline(yintercept = 0)
ggplot(effect.dt1, aes(x = mark, y = beta, color = feature)) +
geom_point(aes(size = logLik)) +
# geom_point(aes(size = significance)) +
facet_grid(type ~ .) +
geom_hline(yintercept = 0) +
# scale_y_continuous(lim = c(-.35, .35)) +
theme_bw() + xlab("") + ylab("Effect") +
theme(panel.border = element_rect(size = 1, color = "black")) +
theme(axis.text.x = element_text(size = 12, angle = -90, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
strip.text = element_text(size = 12, face = "bold")) +
theme(legend.position = "top", legend.direction = "horizontal",
legend.text = element_text(size = 12, face = "bold"),
#       legend.title = element_blank(), legend.key = element_blank())
legend.title = element_text(size = 12, face = "bold"), legend.key = element_blank())
ggplot(effect.dt1, aes(x = mark, y = beta, color = feature)) +
geom_point(aes(size = logLik)) +
# geom_point(aes(size = significance)) +
facet_grid(type ~ .) +
geom_hline(yintercept = 0) +
# scale_y_continuous(lim = c(-.35, .35)) +
theme_bw() + xlab("") + ylab("Effect") +
theme(panel.border = element_rect(size = 1, color = "black")) +
theme(axis.text.x = element_text(size = 12, angle = -90, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
strip.text = element_text(size = 12, face = "bold")) +
theme(legend.position = "top", legend.direction = "horizontal",
legend.text = element_text(size = 12, face = "bold"),
#       legend.title = element_blank(), legend.key = element_blank())
legend.title = element_text(size = 12, face = "bold", color = "grey"), legend.key = element_blank())
ggplot(effect.dt1, aes(x = mark, y = beta, color = feature)) +
geom_point(aes(size = logLik)) +
# geom_point(aes(size = significance)) +
facet_grid(type ~ .) +
geom_hline(yintercept = 0) +
# scale_y_continuous(lim = c(-.35, .35)) +
theme_bw() + xlab("") + ylab("Effect") +
theme(panel.border = element_rect(size = 1, color = "black")) +
theme(axis.text.x = element_text(size = 12, angle = -90, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
strip.text = element_text(size = 12, face = "bold")) +
theme(legend.position = "top", legend.direction = "horizontal",
legend.text = element_text(size = 12, face = "bold"),
#       legend.title = element_blank(), legend.key = element_blank())
legend.title = element_text(size = 12, face = "bold", color = "grey90"), legend.key = element_blank())
ggplot(effect.dt1, aes(x = mark, y = beta, color = feature)) +
geom_point(aes(size = logLik)) +
# geom_point(aes(size = significance)) +
facet_grid(type ~ .) +
geom_hline(yintercept = 0) +
# scale_y_continuous(lim = c(-.35, .35)) +
theme_bw() + xlab("") + ylab("Effect") +
theme(panel.border = element_rect(size = 1, color = "black")) +
theme(axis.text.x = element_text(size = 12, angle = -90, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
strip.text = element_text(size = 12, face = "bold")) +
theme(legend.position = "top", legend.direction = "horizontal",
legend.text = element_text(size = 12, face = "bold"),
#       legend.title = element_blank(), legend.key = element_blank())
legend.title = element_text(size = 12, face = "bold", color = "grey20"), legend.key = element_blank())
ggplot(effect.dt1, aes(x = mark, y = beta, color = feature)) +
geom_point(aes(size = logLik)) +
# geom_point(aes(size = significance)) +
facet_grid(type ~ .) +
geom_hline(yintercept = 0) +
# scale_y_continuous(lim = c(-.35, .35)) +
theme_bw() + xlab("") + ylab("Effect") +
theme(panel.border = element_rect(size = 1, color = "black")) +
theme(axis.text.x = element_text(size = 12, angle = -90, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
strip.text = element_text(size = 12, face = "bold")) +
theme(legend.position = "top", legend.direction = "horizontal",
legend.text = element_text(size = 12, face = "bold"),
#       legend.title = element_blank(), legend.key = element_blank())
legend.title = element_text(size = 12, face = "bold", color = "grey30"), legend.key = element_blank())
pdf("~/Dropbox/Network/R1.fig/logLikSingle.pdf", width = 10)
# pdf("~/Dropbox/Network/R1.fig/effectSingle.pdf")
# ggplot(effect.dt1, aes(x = mark, y = estimate, color = feature)) +
ggplot(effect.dt1, aes(x = mark, y = beta, color = feature)) +
geom_point(aes(size = logLik)) +
# geom_point(aes(size = significance)) +
facet_grid(type ~ .) +
geom_hline(yintercept = 0) +
# scale_y_continuous(lim = c(-.35, .35)) +
theme_bw() + xlab("") + ylab("Effect") +
theme(panel.border = element_rect(size = 1, color = "black")) +
theme(axis.text.x = element_text(size = 12, angle = -90, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
strip.text = element_text(size = 12, face = "bold")) +
theme(legend.position = "top", legend.direction = "horizontal",
legend.text = element_text(size = 12, face = "bold"),
#       legend.title = element_blank(), legend.key = element_blank())
legend.title = element_text(size = 12, face = "bold", color = "grey30"), legend.key = element_blank())
dev.off()
pdf("~/Dropbox/Network/R1.fig/logLikSingle.pdf", width = 10)
# pdf("~/Dropbox/Network/R1.fig/effectSingle.pdf")
# ggplot(effect.dt1, aes(x = mark, y = estimate, color = feature)) +
ggplot(effect.dt1, aes(x = mark, y = beta, color = feature)) +
geom_point(aes(size = logLik)) +
# geom_point(aes(size = significance)) +
facet_grid(type ~ .) +
geom_hline(yintercept = 0, color = "grey30") +
# scale_y_continuous(lim = c(-.35, .35)) +
theme_bw() + xlab("") + ylab("Effect") +
theme(panel.border = element_rect(size = 1, color = "black")) +
theme(axis.text.x = element_text(size = 12, angle = -90, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
strip.text = element_text(size = 12, face = "bold")) +
theme(legend.position = "top", legend.direction = "horizontal",
legend.text = element_text(size = 12, face = "bold"),
#       legend.title = element_blank(), legend.key = element_blank())
legend.title = element_text(size = 12, face = "bold", color = "grey30"), legend.key = element_blank())
dev.off()
summary(mod.aic)
anova(model2)
head(en.bi)
mod.aic
head(en.bi)
?cumSum
?cumSums
?cumsums
?cumsum
cumprod(1:10)
diff(1:20)
diff(1:5)
x = c(rep(0, 10), rep(1, 10))
x = sample(x)
x
diff(x)
length(x)
length(diff(x))
c(0, abs(diff(x))) | c(abs(diff(x)), 0)
as.numeric(c(0, abs(diff(x))) | c(abs(diff(x)), 0))
x[3] = 0
x
as.numeric(c(0, abs(diff(x))) | c(abs(diff(x)), 0))
c(0, abs(diff(x)))
x = c(x, 1, 1, 1)
x
as.numeric(c(0, abs(diff(x))) | c(abs(diff(x)), 0))
1 | 0
as.logical(-1, 0, 1)
as.logicalc((-1, 0, 1))
as.logical(c(-1, 0, 1))
x
y = sample(x)
y
as.numeric(y - x == 1)
u5.bi <- refgene.bi[, "u5"] * marks.bi
Geno <- function(x1, x2, x3) {  # calculate number of 1 in a region
# y: number of 1 in a binary genomic data (x2) in regions defined by a bed data (x1)
# x3: length|peak|signal
y <- c(rep(0, nrow(x1)))
x1$chrom <- as.character(x1$chrom)
x1$chrom <- gsub("chrX", "chr20", x1$chrom)
x1$chrom <- gsub("chrY", "chr21", x1$chrom)
x1$chrom <- as.numeric(gsub("chr", "", x1$chrom))
myFun <- function (x) {
if (x3 == "length") return(sum(x))
if (x3 == "peak") return(Peak(x))
if (x3 == "signal") return(max(x))
}
for (i in 1:nrow(x1)) {
if (i %% 1e4 == 0) cat(i, "in", nrow(x1), "\n")
x1.1 <- x1[i, ]  # single record
offset <- cumsum(c(0, chrom.leng))[x1.1$chrom]
start <- offset + x1.1$chromStart %/% chrom.unit
end <- offset + x1.1$chromEnd %/% chrom.unit
y[i] <- myFun(x2[start:end])
}
return(y)
}
u5.len <- Geno(refgene.tx, refgene.bi[, "u3"], "length")
u5.len <- Geno(refgene.tx, refgene.bi[, "u5"], "length")
summary(u5.len)
which(u5.len)
which(u5.len == 0)
head(refgene.tx)
x = refgene.tx[u5.len == 0, ]
head(x)
head(refgene.u5)
refgene.u5 <- read.delim("~/Dropbox/X/refGene5pUTR.bed", header = F, stringsAsFactors = F)
colnames(refgene.u5)[1:3] <- c("chrom", "chromStart", "chromEnd")
head(refgene.u5)
library(arm)
library(lme4)
library(lmtest)
library(ggplot2)
rm(list = ls())
load("~/Dropbox/ADSP/R/mdata1.rdt")
load("~/Dropbox/ADSP/R/geno.rdt")
str(geno)
geno[1, ]
loci <- read.delim("~/Dropbox/ADSP/21loci.txt", stringsAsFactors = F)
loci <- loci[loci$SNP %in% rownames(geno), ]
geno1 <- geno[loci$SNP, ]
cat("--- models w/o variants \n")
data1 <- mdata[, c("AD1", "Sex", "Age", "APOE", "Family.ID")]
data1$APOE <- relevel(data1$APOE, ref = "33")  # ref allele: 33
#--- Sex: 0-M, 1-F
model4 <- lmer(formula = AD1 ~ Sex + Age + APOE + (1 | Family.ID), data1)
data2 <- cbind(data1, SNP = geno[1, ])
model4f = lmer(formula = AD1 ~ Sex + Age + APOE + SNP + (1 | Family.ID), data2)
data2
logLik(model4s) - logLik(model4)
logLik(model4f) - logLik(model4)
model4
model4f
str(data2)
data2$SNP = factor(data2$SNP, levels = c(0, 1, 2))
model4f = lmer(formula = AD1 ~ Sex + Age + APOE + SNP + (1 | Family.ID), data2)
logLik(model4f) - logLik(model4)
model4f
?lmer()
